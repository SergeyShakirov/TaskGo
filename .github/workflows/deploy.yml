name: Deploy to VPS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install frontend dependencies
      run: npm ci

    - name: Install backend dependencies
      run: cd backend && npm ci

    - name: Run frontend linting
      run: npm run lint

    - name: Run backend linting
      run: cd backend && npm run lint

    - name: Run frontend tests
      run: npm test -- --coverage --watchAll=false

    - name: Run backend tests
      run: cd backend && npm test -- --coverage
      env:
        DB_TYPE: postgresql
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: test_db
        DB_USER: test_user
        DB_PASSWORD: test_password
        NODE_ENV: test

    - name: Build backend
      run: cd backend && npm run build

    - name: Upload test coverage
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage/lcov.info,./backend/coverage/lcov.info
        fail_ci_if_error: true

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: write

    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./backend/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  deploy:
    needs: [test, build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    environment:
      name: production
      url: https://${{ secrets.DOMAIN_NAME }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.VPS_SSH_KEY }}

    - name: Add VPS to known hosts
      run: |
        ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy to VPS
      run: |
        # Copy deployment files to VPS
        scp -r ./deploy ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/opt/taskgo/
        scp docker-compose.prod.yml ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/opt/taskgo/
        scp -r ./nginx ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/opt/taskgo/
        
        # Create environment file on VPS
        ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
          cd /opt/taskgo
          
          # Create production environment file
          cat > .env.production << 'ENVEOF'
          NODE_ENV=production
          DB_TYPE=postgresql
          DB_HOST=postgres
          DB_PORT=5432
          DB_NAME=${{ secrets.DB_NAME }}
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          DEEPSEEK_API_KEY=${{ secrets.DEEPSEEK_API_KEY }}
          PORT=3001
          REDIS_URL=redis://redis:6379
          CORS_ORIGIN=https://${{ secrets.DOMAIN_NAME }}
        ENVEOF
          
          # Update nginx configuration with actual domain
          sed -i 's/your-domain.com/${{ secrets.DOMAIN_NAME }}/g' nginx/conf.d/taskgo.conf
          
          # Make deploy script executable
          chmod +x deploy/deploy.sh
          
          # Run deployment
          ./deploy/deploy.sh
        EOF

    - name: Health check
      run: |
        # Wait for deployment to complete
        sleep 60
        
        # Check if application is healthy
        for i in {1..10}; do
          if curl -f https://${{ secrets.DOMAIN_NAME }}/health; then
            echo "✅ Deployment successful - Application is healthy"
            exit 0
          fi
          echo "⏳ Waiting for application to start... (attempt $i/10)"
          sleep 30
        done
        
        echo "❌ Deployment failed - Application health check failed"
        exit 1

    - name: Slack notification
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  security-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run npm audit
      run: |
        npm audit --audit-level=high
        cd backend && npm audit --audit-level=high
