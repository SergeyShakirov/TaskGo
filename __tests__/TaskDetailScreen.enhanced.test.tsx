import React from 'react';
import { render, fireEvent, waitFor } from '@testing-library/react-native';
import TaskDetailScreen from '../src/screens/TaskDetailScreen';

// Mock navigation
const mockNavigation = {
  navigate: jest.fn(),
  goBack: jest.fn(),
};

// Mock route
const mockRoute = {
  params: {
    taskId: '1',
  },
};

// Mock react-native components and modules
jest.mock('react-native', () => {
  const actualRN = jest.requireActual('react-native');
  return {
    ...actualRN,
    Alert: {
      alert: jest.fn(),
    },
  };
});

// Mock components
jest.mock('../src/components/LoadingSpinner', () => {
  const { View, Text } = require('react-native');
  return {
    LoadingSpinner: () => <View testID="loading-spinner"><Text>Loading...</Text></View>,
  };
});

jest.mock('../src/components/ErrorMessage', () => {
  const { View, Text, TouchableOpacity } = require('react-native');
  return {
    ErrorMessage: ({ message, onRetry }: any) => (
      <View testID="error-message">
        <Text>{message}</Text>
        <TouchableOpacity onPress={onRetry}>
          <Text>Retry</Text>
        </TouchableOpacity>
      </View>
    ),
  };
});

describe('TaskDetailScreen', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  it('renders loading state correctly', () => {
    const { getByTestId, getByText } = render(
      <TaskDetailScreen route={mockRoute} navigation={mockNavigation} />
    );

    expect(getByText('–ó–∞–≥—Ä—É–∑–∫–∞...')).toBeTruthy();
    expect(getByTestId('loading-spinner')).toBeTruthy();
  });

  it('renders task details after loading', async () => {
    const { getByText } = render(
      <TaskDetailScreen route={mockRoute} navigation={mockNavigation} />
    );

    await waitFor(() => {
      expect(getByText('–î–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏')).toBeTruthy();
      expect(getByText('–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è')).toBeTruthy();
      expect(getByText('–û–∂–∏–¥–∞–µ—Ç —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è')).toBeTruthy();
      expect(getByText('–í—ã—Å–æ–∫–∏–π')).toBeTruthy();
      expect(getByText('–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ü–û')).toBeTruthy();
    });
  });

  it('renders task information correctly', async () => {
    const { getByText } = render(
      <TaskDetailScreen route={mockRoute} navigation={mockNavigation} />
    );

    await waitFor(() => {
      expect(getByText('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ')).toBeTruthy();
      expect(getByText('–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤')).toBeTruthy();
      expect(getByText('ivan@example.com')).toBeTruthy();
      expect(getByText('120 —á.')).toBeTruthy();
      expect(getByText('150 000 ‚ÇΩ')).toBeTruthy();
    });
  });

  it('has back button that calls navigation.goBack when pressed', async () => {
    const { getAllByText } = render(
      <TaskDetailScreen route={mockRoute} navigation={mockNavigation} />
    );

    await waitFor(() => {
      const backButtons = getAllByText('‚Üê');
      expect(backButtons.length).toBeGreaterThan(0);
      
      fireEvent.press(backButtons[0]);
      expect(mockNavigation.goBack).toHaveBeenCalledTimes(1);
    });
  });

  it('shows action buttons for pending tasks', async () => {
    const { getByText } = render(
      <TaskDetailScreen route={mockRoute} navigation={mockNavigation} />
    );

    await waitFor(() => {
      expect(getByText('‚úÖ –£—Ç–≤–µ—Ä–¥–∏—Ç—å –¢–ó')).toBeTruthy();
      expect(getByText('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å')).toBeTruthy();
      expect(getByText('üöÄ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É')).toBeTruthy();
    });
  });

  it('handles approve button press', async () => {
    const Alert = require('react-native').Alert;
    const { getByText } = render(
      <TaskDetailScreen route={mockRoute} navigation={mockNavigation} />
    );

    await waitFor(() => {
      const approveButton = getByText('‚úÖ –£—Ç–≤–µ—Ä–¥–∏—Ç—å –¢–ó');
      fireEvent.press(approveButton);
      
      expect(Alert.alert).toHaveBeenCalledWith(
        '–£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ',
        '–¢–ó —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!',
        [{ text: '–û–ö', onPress: expect.any(Function) }]
      );
    });
  });

  it('handles edit button press', async () => {
    const Alert = require('react-native').Alert;
    const { getByText } = render(
      <TaskDetailScreen route={mockRoute} navigation={mockNavigation} />
    );

    await waitFor(() => {
      const editButton = getByText('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å');
      fireEvent.press(editButton);
      
      expect(Alert.alert).toHaveBeenCalledWith(
        '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ',
        '–§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ',
        [
          { text: '–û—Ç–º–µ–Ω–∞', style: 'cancel' },
          { text: '–û–ö' }
        ]
      );
    });
  });

  it('handles start work button press', async () => {
    const Alert = require('react-native').Alert;
    const { getByText } = render(
      <TaskDetailScreen route={mockRoute} navigation={mockNavigation} />
    );

    await waitFor(() => {
      const startWorkButton = getByText('üöÄ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É');
      fireEvent.press(startWorkButton);
      
      expect(Alert.alert).toHaveBeenCalledWith(
        '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É',
        '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É –Ω–∞–¥ —ç—Ç–æ–π –∑–∞–¥–∞—á–µ–π?',
        [
          { text: '–û—Ç–º–µ–Ω–∞', style: 'cancel' },
          { text: '–ù–∞—á–∞—Ç—å', onPress: expect.any(Function) }
        ]
      );
    });
  });

  it('renders priority badge with correct color', async () => {
    const { getByText } = render(
      <TaskDetailScreen route={mockRoute} navigation={mockNavigation} />
    );

    await waitFor(() => {
      const priorityText = getByText('–í—ã—Å–æ–∫–∏–π');
      expect(priorityText).toBeTruthy();
    });
  });

  it('renders category badge', async () => {
    const { getByText } = render(
      <TaskDetailScreen route={mockRoute} navigation={mockNavigation} />
    );

    await waitFor(() => {
      const categoryText = getByText('–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ü–û');
      expect(categoryText).toBeTruthy();
    });
  });

  it('formats dates correctly', async () => {
    const { getByText } = render(
      <TaskDetailScreen route={mockRoute} navigation={mockNavigation} />
    );

    await waitFor(() => {
      // Check that dates are formatted as DD.MM.YYYY
      const dateRegex = /\d{2}\.\d{2}\.\d{4}/;
      const allText = getByText(/\d{2}\.\d{2}\.\d{4}/);
      expect(allText).toBeTruthy();
    });
  });

  it('renders task description with proper styling', async () => {
    const { getByText } = render(
      <TaskDetailScreen route={mockRoute} navigation={mockNavigation} />
    );

    await waitFor(() => {
      const description = getByText(/–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –∑–∞–∫–∞–∑–∞ –µ–¥—ã/);
      expect(description).toBeTruthy();
    });
  });
});
