import React from 'react';
import { render, fireEvent } from '@testing-library/react-native';
import CreateTaskScreen from '../src/screens/CreateTaskScreen';

// Mock navigation
const mockNavigation = {
  navigate: jest.fn(),
  goBack: jest.fn(),
};

// Mock the AI generation hook
jest.mock('../src/hooks/useAIGeneration', () => ({
  useAIGeneration: () => ({
    generateDescription: jest.fn(),
    response: null,
    isLoading: false,
    error: null,
    clearError: jest.fn(),
  }),
}));

describe('CreateTaskScreen UI Design', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  it('renders back button with modern design', () => {
    const { getByText } = render(
      <CreateTaskScreen navigation={mockNavigation} />
    );

    const backButton = getByText('‚Üê');
    expect(backButton).toBeTruthy();
  });

  it('back button has correct styling and functionality', () => {
    const { getByText } = render(
      <CreateTaskScreen navigation={mockNavigation} />
    );

    const backButton = getByText('‚Üê');
    
    // Test functionality
    fireEvent.press(backButton);
    expect(mockNavigation.goBack).toHaveBeenCalledTimes(1);
  });

  it('renders header with proper alignment', () => {
    const { getByText } = render(
      <CreateTaskScreen navigation={mockNavigation} />
    );

    // Check header elements
    expect(getByText('‚Üê')).toBeTruthy(); // Back button
    expect(getByText('–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞')).toBeTruthy(); // Title
    expect(getByText('–°–æ–∑–¥–∞–π—Ç–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ')).toBeTruthy(); // Subtitle
  });

  it('renders all form elements', () => {
    const { getByText, getByPlaceholderText } = render(
      <CreateTaskScreen navigation={mockNavigation} />
    );

    // Check form elements
    expect(getByText('–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞')).toBeTruthy();
    expect(getByPlaceholderText('–ö—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç')).toBeTruthy();
    expect(getByText('–ö–∞—Ç–µ–≥–æ—Ä–∏—è')).toBeTruthy();
    expect(getByText('–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ')).toBeTruthy();
    expect(getByPlaceholderText('–ù–∞–ø—Ä–∏–º–µ—Ä: –°–æ–∑–¥–∞—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –æ–¥–µ–∂–¥—ã')).toBeTruthy();
  });

  it('renders category chips', () => {
    const { getByText } = render(
      <CreateTaskScreen navigation={mockNavigation} />
    );

    // Check category chips
    expect(getByText('–í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞')).toBeTruthy();
    expect(getByText('–ú–æ–±–∏–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞')).toBeTruthy();
    expect(getByText('–î–∏–∑–∞–π–Ω')).toBeTruthy();
    expect(getByText('–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥')).toBeTruthy();
    expect(getByText('–ö–æ–Ω—Ç–µ–Ω—Ç')).toBeTruthy();
  });

  it('allows category selection', () => {
    const { getByText } = render(
      <CreateTaskScreen navigation={mockNavigation} />
    );

    const categoryChip = getByText('–í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞');
    fireEvent.press(categoryChip);
    
    // Category should be selected (this would change styling in real app)
    expect(categoryChip).toBeTruthy();
  });

  it('renders action buttons', () => {
    const { getByText } = render(
      <CreateTaskScreen navigation={mockNavigation} />
    );

    expect(getByText('‚ú® –°–æ–∑–¥–∞—Ç—å –¢–ó —Å –ò–ò')).toBeTruthy();
    expect(getByText('üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É')).toBeTruthy();
  });

  it('renders budget and deadline inputs', () => {
    const { getByText, getByPlaceholderText } = render(
      <CreateTaskScreen navigation={mockNavigation} />
    );

    expect(getByText('–ë—é–¥–∂–µ—Ç (‚ÇΩ)')).toBeTruthy();
    expect(getByPlaceholderText('50 000')).toBeTruthy();
    expect(getByText('–°—Ä–æ–∫ (–¥–Ω–µ–π)')).toBeTruthy();
    expect(getByPlaceholderText('30')).toBeTruthy();
  });

  it('handles form input changes', () => {
    const { getByPlaceholderText } = render(
      <CreateTaskScreen navigation={mockNavigation} />
    );

    const titleInput = getByPlaceholderText('–ö—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç');
    const descriptionInput = getByPlaceholderText('–ù–∞–ø—Ä–∏–º–µ—Ä: –°–æ–∑–¥–∞—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –æ–¥–µ–∂–¥—ã');
    const budgetInput = getByPlaceholderText('50 000');
    const deadlineInput = getByPlaceholderText('30');

    fireEvent.changeText(titleInput, '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç');
    fireEvent.changeText(descriptionInput, '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞');
    fireEvent.changeText(budgetInput, '100000');
    fireEvent.changeText(deadlineInput, '45');

    expect(titleInput.props.value).toBe('–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç');
    expect(descriptionInput.props.value).toBe('–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞');
    expect(budgetInput.props.value).toBe('100000');
    expect(deadlineInput.props.value).toBe('45');
  });
});
