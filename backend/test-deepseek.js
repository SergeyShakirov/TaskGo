const axios = require("axios");

const BASE_URL = "http://localhost:3001/api/ai";

async function testDeepSeekEndpoints() {
  console.log("ü§ñ –¢–µ—Å—Ç–∏—Ä—É–µ–º DeepSeek API endpoints...\n");

  // –¢–µ—Å—Ç 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
  console.log("1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º /generate-description");
  try {
    const response = await axios.post(`${BASE_URL}/generate-description`, {
      briefDescription:
        "–°–æ–∑–¥–∞—Ç—å –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∑–∞–∫–∞–∑–∞ –µ–¥—ã —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π",
    });
    console.log("‚úÖ –£—Å–ø–µ—à–Ω–æ:", response.data.success);
    console.log(
      "üìù –î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:",
      response.data.data?.detailedDescription?.substring(0, 100) + "..."
    );
    console.log("‚è±Ô∏è –ß–∞—Å—ã:", response.data.data?.estimatedHours);
    console.log("üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å:", response.data.data?.estimatedCost);
  } catch (error) {
    console.log("‚ùå –û—à–∏–±–∫–∞:", error.response?.data || error.message);
  }

  console.log("\n" + "=".repeat(50) + "\n");

  // –¢–µ—Å—Ç 2: –û—Ü–µ–Ω–∫–∞ –∑–∞–¥–∞—á–∏
  console.log("2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º /estimate");
  try {
    const response = await axios.post(`${BASE_URL}/estimate`, {
      description: "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ CRM —Å–∏—Å—Ç–µ–º—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞–º–∏",
    });
    console.log("‚úÖ –£—Å–ø–µ—à–Ω–æ:", response.data.success);
    console.log("‚è±Ô∏è –ß–∞—Å—ã:", response.data.data?.hours);
    console.log("üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å:", response.data.data?.cost);
    console.log("üéØ –°–ª–æ–∂–Ω–æ—Å—Ç—å:", response.data.data?.complexity);
  } catch (error) {
    console.log("‚ùå –û—à–∏–±–∫–∞:", error.response?.data || error.message);
  }

  console.log("\n" + "=".repeat(50) + "\n");

  // –¢–µ—Å—Ç 3: –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—è–º
  console.log("3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º /suggest-improvements");
  try {
    const response = await axios.post(`${BASE_URL}/suggest-improvements`, {
      description: "–ü—Ä–æ—Å—Ç–æ–π —Å–∞–π—Ç-–≤–∏–∑–∏—Ç–∫–∞ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏",
    });
    console.log("‚úÖ –£—Å–ø–µ—à–Ω–æ:", response.data.success);
    console.log(
      "üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:",
      response.data.data?.suggestions?.length,
      "—à—Ç—É–∫"
    );
    response.data.data?.suggestions?.forEach((suggestion, index) => {
      console.log(`   ${index + 1}. ${suggestion}`);
    });
  } catch (error) {
    console.log("‚ùå –û—à–∏–±–∫–∞:", error.response?.data || error.message);
  }

  console.log("\n" + "=".repeat(50) + "\n");

  // –¢–µ—Å—Ç 4: –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  console.log("4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º /suggest-categories");
  try {
    const response = await axios.post(`${BASE_URL}/suggest-categories`, {
      description: "–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞ –æ–¥–µ–∂–¥—ã —Å –∫–æ—Ä–∑–∏–Ω–æ–π –∏ –æ–ø–ª–∞—Ç–æ–π",
    });
    console.log("‚úÖ –£—Å–ø–µ—à–Ω–æ:", response.data.success);
    console.log("üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏:");
    response.data.data?.forEach((category) => {
      console.log(`   ‚Ä¢ ${category.name} (${category.icon})`);
    });
  } catch (error) {
    console.log("‚ùå –û—à–∏–±–∫–∞:", error.response?.data || error.message);
  }

  console.log("\n" + "=".repeat(50) + "\n");

  // –¢–µ—Å—Ç 5: –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
  console.log("5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º /analyze-complexity");
  try {
    const response = await axios.post(`${BASE_URL}/analyze-complexity`, {
      description:
        "–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –±–ª–æ–∫—á–µ–π–Ω —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π",
    });
    console.log("‚úÖ –£—Å–ø–µ—à–Ω–æ:", response.data.success);
    console.log("üéØ –°–ª–æ–∂–Ω–æ—Å—Ç—å:", response.data.data?.complexity);
    console.log("‚ö†Ô∏è –§–∞–∫—Ç–æ—Ä—ã:", response.data.data?.factors?.length, "—à—Ç—É–∫");
    console.log(
      "üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:",
      response.data.data?.recommendations?.length,
      "—à—Ç—É–∫"
    );
  } catch (error) {
    console.log("‚ùå –û—à–∏–±–∫–∞:", error.response?.data || error.message);
  }

  console.log("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!");
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
testDeepSeekEndpoints().catch(console.error);
